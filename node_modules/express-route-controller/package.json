{
  "name": "express-route-controller",
  "version": "0.0.4",
  "description": "A helper function to assign controller actions to routes in express",
  "main": "index.js",
  "dependencies": {
    "ctrlr": "~0.2.1"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "express",
    "route",
    "routes",
    "controller",
    "controllers",
    "routing",
    "action"
  ],
  "author": {
    "name": "Arnor Heidar Sigurdsson",
    "email": "arnorhs@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/arnorhs/express-route-controller.git"
  },
  "bugs": {
    "url": "https://github.com/arnorhs/express-route-controller/issues"
  },
  "readme": "## express-route-controller\n\nThis is a helper function to assign controller actions to routes\nin [express](http://expressjs.com/) (Not sure if it works with connect as well).\n\nIt provides just a tiny bit of structure on top of a normal express app, but also\ndoesn't get in the way at all, and you can continue to use express normally and\ndefine even more routes manually if you wish.\n\n### Usage:\n\nIn your express project install express-route-controller:\n\n```\nnpm install express-route-controller\n```\n\nNow create a folder where you want all your controllers, eg. `controllers`, and add a file in there,\nnamed `mycontroller.js`. Then define it somehow, like so:\n\n```javascript\nmodule.exports = {\n    myaction: function(req, res) {\n    },\n    myotheraction: function(req, res) {\n    }\n};\n```\n\nIn your main app.js file (or wherever you set up express routes normally) simply call the helper\nfunction (very sparse demo express app):\n\n```javascript\nvar express = require('express');\nvar app = express();\nvar erc = require('express-route-controller');\n\n// set up express route control:\nerc(app, {\n    controllers: __dirname + '/controllers',\n    routes: {\n        '/fetch_hotdogs': 'mycontroller#myaction',\n        '/save_hotdogs': { action: 'mycontroller#myotheraction', method: 'post' }\n    }\n});\n\napp.listen(3000);\n```\n\nYou can make this even more easier, by defining your routes in a `routes.json` file, like so:\n```json\n{\n    \"/fetch_hotdogs\": \"mycontroller#myaction\",\n    \"/save_hotdogs\": { \"action\": \"mycontroller#myotheraction\", \"method\": \"post\" }\n}\n```\n\nAnd loading the routes is as simple as:\n\n```javascript\n...\n\nerc(app, {\n    controllers: __dirname + '/controllers',\n    routes: require('routes.json')\n});\n\n...\n```\n\n### Feedback\n\nPull requests, feature ideas and bug reports are welcome\n\n### Todo\n\n- Figuring out a way to deal with middleware, for non-gloabl type of middleware\n- It would be nice to figure out a way to add unit tests\n- Possibly there should be an easy mode for everybody who wants to use the defaults. Either that\n  or having the basepath as a spearate variable and including a routes.json file if the routes argument\n  passed is a string rather than an object\n- It would be nice to have a command line utility to genearte the controllers. Possibly with a\n  `res.send('name of action');` in the function body\n\n### License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/arnorhs/express-route-controller",
  "_id": "express-route-controller@0.0.4",
  "dist": {
    "shasum": "4af781a3197045b77a5a5fceece171508f125752",
    "tarball": "http://registry.npmjs.org/express-route-controller/-/express-route-controller-0.0.4.tgz"
  },
  "_from": "express-route-controller@*",
  "_npmVersion": "1.3.17",
  "_npmUser": {
    "name": "arnorhs",
    "email": "arnorhs@gmail.com"
  },
  "maintainers": [
    {
      "name": "arnorhs",
      "email": "arnorhs@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "4af781a3197045b77a5a5fceece171508f125752",
  "_resolved": "https://registry.npmjs.org/express-route-controller/-/express-route-controller-0.0.4.tgz"
}
